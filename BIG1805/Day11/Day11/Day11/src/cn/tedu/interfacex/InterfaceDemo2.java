package cn.tedu.interfacex;

public class InterfaceDemo2 {

	public static void main(String[] args) {

		// A a = new B1();

		// 对于继承而言，在Java中支持的是类和类之间的单继承
		// 所以可以形成一棵继承结构树
		// 由于形成的是一个树状结构，所以可以判断任意两个点之间是否有继承关系
		// 也因此在编译的时候会去判断要强转的类和声明类之间是否有继承关系
		// 现在要把a强转为b1对象
		// 会去判断a的声明类A和B1是否有继承关系
		// 如果有继承关系，在编译期间则允许通过
		// 在运行的时候才回去检查是否和具体类型一致
		// B1 b1 = (B1) a;

		// B2 b2 = (B2) a;

		// C c = (C) a;

		// 在Java中，支持的类和接口之间的多实现并且支持接口之间的多继承
		// 所以此时形成的不是树状结构而是网状结构
		// 在网状结构中，想要判断两个点之间是否有继承关系是一件相对复杂的事情
		// 所以为了提高编译效率，在编译期间，放弃对接口的检查
		// 也就意味着可以用任何一个接口强转任何一个对象而编译不报错
		// 但是到运行的时候会真正检查是否能够强转
		// D d = (D) a;

		System.out.println("运行成功~~~");

	}

}

class A {
}

class B1 extends A {
}

class B2 extends A {
}

class C {
}

interface D {
}
